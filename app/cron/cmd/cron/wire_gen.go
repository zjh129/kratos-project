// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"kratos-project/app/cron/internal/biz"
	"kratos-project/app/cron/internal/conf"
	"kratos-project/app/cron/internal/data"
	"kratos-project/app/cron/internal/server"
	"kratos-project/app/cron/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confRegistry *conf.Registry, logger log.Logger, registrar registry.Registrar) (*kratos.App, func(), error) {
	broker := data.NewRabbitMQBroker(confData, logger)
	discovery := data.NewDiscovery(confRegistry)
	userClient := data.NewUserRpcClient(discovery)
	dataData, cleanup, err := data.NewData(confData, logger, broker, userClient)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRpcRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	userCountService := service.NewUserCountService(logger, userUseCase)
	mqPushRepo := data.NewMqPushRepo(dataData, confData, logger)
	mqPushUseCase := biz.NewMqPushUseCase(mqPushRepo, logger)
	rabbitmqPushService := service.NewRabbitmqPushService(logger, mqPushUseCase)
	cronService := service.NewJobService(userCountService, rabbitmqPushService)
	cronServer := server.NewCronServer(cronService, logger)
	app := newApp(logger, cronServer)
	return app, func() {
		cleanup()
	}, nil
}
