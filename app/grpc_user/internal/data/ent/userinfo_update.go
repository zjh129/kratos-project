// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-project/app/grpc_user/internal/data/ent/predicate"
	"kratos-project/app/grpc_user/internal/data/ent/userinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserInfoUpdate is the builder for updating UserInfo entities.
type UserInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserInfoMutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiu *UserInfoUpdate) Where(ps ...predicate.UserInfo) *UserInfoUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetDeleteTime sets the "delete_time" field.
func (uiu *UserInfoUpdate) SetDeleteTime(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetDeleteTime(t)
	return uiu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableDeleteTime(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetDeleteTime(*t)
	}
	return uiu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uiu *UserInfoUpdate) ClearDeleteTime() *UserInfoUpdate {
	uiu.mutation.ClearDeleteTime()
	return uiu
}

// SetAccount sets the "account" field.
func (uiu *UserInfoUpdate) SetAccount(s string) *UserInfoUpdate {
	uiu.mutation.SetAccount(s)
	return uiu
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableAccount(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetAccount(*s)
	}
	return uiu
}

// SetPassword sets the "password" field.
func (uiu *UserInfoUpdate) SetPassword(s string) *UserInfoUpdate {
	uiu.mutation.SetPassword(s)
	return uiu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillablePassword(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetPassword(*s)
	}
	return uiu
}

// SetName sets the "name" field.
func (uiu *UserInfoUpdate) SetName(s string) *UserInfoUpdate {
	uiu.mutation.SetName(s)
	return uiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableName(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetName(*s)
	}
	return uiu
}

// SetAvatar sets the "avatar" field.
func (uiu *UserInfoUpdate) SetAvatar(s string) *UserInfoUpdate {
	uiu.mutation.SetAvatar(s)
	return uiu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableAvatar(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetAvatar(*s)
	}
	return uiu
}

// SetType sets the "type" field.
func (uiu *UserInfoUpdate) SetType(i int32) *UserInfoUpdate {
	uiu.mutation.ResetType()
	uiu.mutation.SetType(i)
	return uiu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableType(i *int32) *UserInfoUpdate {
	if i != nil {
		uiu.SetType(*i)
	}
	return uiu
}

// AddType adds i to the "type" field.
func (uiu *UserInfoUpdate) AddType(i int32) *UserInfoUpdate {
	uiu.mutation.AddType(i)
	return uiu
}

// SetStatusIs sets the "status_is" field.
func (uiu *UserInfoUpdate) SetStatusIs(i int32) *UserInfoUpdate {
	uiu.mutation.ResetStatusIs()
	uiu.mutation.SetStatusIs(i)
	return uiu
}

// SetNillableStatusIs sets the "status_is" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableStatusIs(i *int32) *UserInfoUpdate {
	if i != nil {
		uiu.SetStatusIs(*i)
	}
	return uiu
}

// AddStatusIs adds i to the "status_is" field.
func (uiu *UserInfoUpdate) AddStatusIs(i int32) *UserInfoUpdate {
	uiu.mutation.AddStatusIs(i)
	return uiu
}

// SetCreatedAt sets the "created_at" field.
func (uiu *UserInfoUpdate) SetCreatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetCreatedAt(t)
	return uiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableCreatedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetCreatedAt(*t)
	}
	return uiu
}

// SetUpdatedAt sets the "updated_at" field.
func (uiu *UserInfoUpdate) SetUpdatedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetUpdatedAt(t)
	return uiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableUpdatedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetUpdatedAt(*t)
	}
	return uiu
}

// SetDeletedAt sets the "deleted_at" field.
func (uiu *UserInfoUpdate) SetDeletedAt(t time.Time) *UserInfoUpdate {
	uiu.mutation.SetDeletedAt(t)
	return uiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableDeletedAt(t *time.Time) *UserInfoUpdate {
	if t != nil {
		uiu.SetDeletedAt(*t)
	}
	return uiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uiu *UserInfoUpdate) ClearDeletedAt() *UserInfoUpdate {
	uiu.mutation.ClearDeletedAt()
	return uiu
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiu *UserInfoUpdate) Mutation() *UserInfoMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfoUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfoUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiu *UserInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.DeleteTime(); ok {
		_spec.SetField(userinfo.FieldDeleteTime, field.TypeTime, value)
	}
	if uiu.mutation.DeleteTimeCleared() {
		_spec.ClearField(userinfo.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := uiu.mutation.Account(); ok {
		_spec.SetField(userinfo.FieldAccount, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Password(); ok {
		_spec.SetField(userinfo.FieldPassword, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Name(); ok {
		_spec.SetField(userinfo.FieldName, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Avatar(); ok {
		_spec.SetField(userinfo.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uiu.mutation.GetType(); ok {
		_spec.SetField(userinfo.FieldType, field.TypeInt32, value)
	}
	if value, ok := uiu.mutation.AddedType(); ok {
		_spec.AddField(userinfo.FieldType, field.TypeInt32, value)
	}
	if value, ok := uiu.mutation.StatusIs(); ok {
		_spec.SetField(userinfo.FieldStatusIs, field.TypeInt32, value)
	}
	if value, ok := uiu.mutation.AddedStatusIs(); ok {
		_spec.AddField(userinfo.FieldStatusIs, field.TypeInt32, value)
	}
	if value, ok := uiu.mutation.CreatedAt(); ok {
		_spec.SetField(userinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uiu.mutation.UpdatedAt(); ok {
		_spec.SetField(userinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uiu.mutation.DeletedAt(); ok {
		_spec.SetField(userinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if uiu.mutation.DeletedAtCleared() {
		_spec.ClearField(userinfo.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserInfoUpdateOne is the builder for updating a single UserInfo entity.
type UserInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInfoMutation
}

// SetDeleteTime sets the "delete_time" field.
func (uiuo *UserInfoUpdateOne) SetDeleteTime(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetDeleteTime(t)
	return uiuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableDeleteTime(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetDeleteTime(*t)
	}
	return uiuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (uiuo *UserInfoUpdateOne) ClearDeleteTime() *UserInfoUpdateOne {
	uiuo.mutation.ClearDeleteTime()
	return uiuo
}

// SetAccount sets the "account" field.
func (uiuo *UserInfoUpdateOne) SetAccount(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetAccount(s)
	return uiuo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableAccount(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetAccount(*s)
	}
	return uiuo
}

// SetPassword sets the "password" field.
func (uiuo *UserInfoUpdateOne) SetPassword(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetPassword(s)
	return uiuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillablePassword(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetPassword(*s)
	}
	return uiuo
}

// SetName sets the "name" field.
func (uiuo *UserInfoUpdateOne) SetName(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetName(s)
	return uiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableName(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetName(*s)
	}
	return uiuo
}

// SetAvatar sets the "avatar" field.
func (uiuo *UserInfoUpdateOne) SetAvatar(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetAvatar(s)
	return uiuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableAvatar(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetAvatar(*s)
	}
	return uiuo
}

// SetType sets the "type" field.
func (uiuo *UserInfoUpdateOne) SetType(i int32) *UserInfoUpdateOne {
	uiuo.mutation.ResetType()
	uiuo.mutation.SetType(i)
	return uiuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableType(i *int32) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetType(*i)
	}
	return uiuo
}

// AddType adds i to the "type" field.
func (uiuo *UserInfoUpdateOne) AddType(i int32) *UserInfoUpdateOne {
	uiuo.mutation.AddType(i)
	return uiuo
}

// SetStatusIs sets the "status_is" field.
func (uiuo *UserInfoUpdateOne) SetStatusIs(i int32) *UserInfoUpdateOne {
	uiuo.mutation.ResetStatusIs()
	uiuo.mutation.SetStatusIs(i)
	return uiuo
}

// SetNillableStatusIs sets the "status_is" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableStatusIs(i *int32) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetStatusIs(*i)
	}
	return uiuo
}

// AddStatusIs adds i to the "status_is" field.
func (uiuo *UserInfoUpdateOne) AddStatusIs(i int32) *UserInfoUpdateOne {
	uiuo.mutation.AddStatusIs(i)
	return uiuo
}

// SetCreatedAt sets the "created_at" field.
func (uiuo *UserInfoUpdateOne) SetCreatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetCreatedAt(t)
	return uiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetCreatedAt(*t)
	}
	return uiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uiuo *UserInfoUpdateOne) SetUpdatedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetUpdatedAt(t)
	return uiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetUpdatedAt(*t)
	}
	return uiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uiuo *UserInfoUpdateOne) SetDeletedAt(t time.Time) *UserInfoUpdateOne {
	uiuo.mutation.SetDeletedAt(t)
	return uiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *UserInfoUpdateOne {
	if t != nil {
		uiuo.SetDeletedAt(*t)
	}
	return uiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uiuo *UserInfoUpdateOne) ClearDeletedAt() *UserInfoUpdateOne {
	uiuo.mutation.ClearDeletedAt()
	return uiuo
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiuo *UserInfoUpdateOne) Mutation() *UserInfoMutation {
	return uiuo.mutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiuo *UserInfoUpdateOne) Where(ps ...predicate.UserInfo) *UserInfoUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserInfoUpdateOne) Select(field string, fields ...string) *UserInfoUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserInfo entity.
func (uiuo *UserInfoUpdateOne) Save(ctx context.Context) (*UserInfo, error) {
	return withHooks(ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) SaveX(ctx context.Context) *UserInfo {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uiuo *UserInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinfo.FieldID)
		for _, f := range fields {
			if !userinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.DeleteTime(); ok {
		_spec.SetField(userinfo.FieldDeleteTime, field.TypeTime, value)
	}
	if uiuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(userinfo.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := uiuo.mutation.Account(); ok {
		_spec.SetField(userinfo.FieldAccount, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Password(); ok {
		_spec.SetField(userinfo.FieldPassword, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Name(); ok {
		_spec.SetField(userinfo.FieldName, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Avatar(); ok {
		_spec.SetField(userinfo.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.GetType(); ok {
		_spec.SetField(userinfo.FieldType, field.TypeInt32, value)
	}
	if value, ok := uiuo.mutation.AddedType(); ok {
		_spec.AddField(userinfo.FieldType, field.TypeInt32, value)
	}
	if value, ok := uiuo.mutation.StatusIs(); ok {
		_spec.SetField(userinfo.FieldStatusIs, field.TypeInt32, value)
	}
	if value, ok := uiuo.mutation.AddedStatusIs(); ok {
		_spec.AddField(userinfo.FieldStatusIs, field.TypeInt32, value)
	}
	if value, ok := uiuo.mutation.CreatedAt(); ok {
		_spec.SetField(userinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uiuo.mutation.DeletedAt(); ok {
		_spec.SetField(userinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if uiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(userinfo.FieldDeletedAt, field.TypeTime)
	}
	_node = &UserInfo{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
