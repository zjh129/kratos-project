syntax = "proto3";

package http_admin;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "kratos-project/api/http_admin;http_admin";
option java_multiple_files = true;
option java_package = "api.http_admin";

service User {
	rpc UserLogin (UserLoginRequest) returns (UserLoginReply) {
		option (google.api.http) = {
			post: "/admin/user/login"
			body: "*"
		};
	};
	rpc UserLogout (UserLogoutRequest) returns (UserLogoutReply) {
		option (google.api.http) = {
			post: "/admin/user/logout"
			body: "*"
		};
	};
	rpc CreateUser (CreateUserRequest) returns (CreateUserReply) {
		option (google.api.http) = {
			post: "/admin/user/user"
			body: "*"
		};
	};
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply) {
		option (google.api.http) = {
			put: "/admin/user/user"
			body: "*"
		};
	};
	rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply) {
		option (google.api.http) = {
			delete: "/admin/user/user/{id}"
		};
	};
	rpc ListUser (ListUserRequest) returns (ListUserReply) {
		option (google.api.http) = {
			get: "/admin/user/users"
		};
	};
	rpc FindUser (FindUserRequest) returns (FindUserReply) {
		option (google.api.http) = {
			get: "/admin/user/user/{id}"
		};
	};
}

message UserLoginRequest {
	string account = 1 [(validate.rules).string = {min_len: 1; max_len: 20}];
	string password = 2 [(validate.rules).string = {min_len: 1}];
}

message UserLoginReply {
	string token = 1;
}

message UserLogoutRequest {
	string token = 1 [(validate.rules).string.min_len = 1];
}

message UserLogoutReply {}

message CreateUserRequest {
	string account = 1 [(validate.rules).string = {min_len: 1, max_len: 20}]; // 用户账号
	string password  = 2 [(validate.rules).string = {min_len: 1}]; // 用户密码
	string name = 3 [(validate.rules).string = {min_len: 1}]; // 用户名称
	string avatar = 4; // 用户头像地址
	bool is_enable = 5; // 可用状态(0:禁用,1:启用)
}

message CreateUserReply {
	int64 id = 1;
}

message UpdateUserRequest {
	int64 id = 1 [(validate.rules).int64.gt = 0]; // 用户ID
	string account = 2 [(validate.rules).string = {min_len: 1, max_len: 20}]; // 用户账号
	string password = 3 [(validate.rules).string = {min_len: 1}]; // 用户密码
	string name = 4 [(validate.rules).string = {min_len: 1}]; // 用户名称
	string avatar = 5; // 用户头像地址
	bool is_enable = 6; // 可用状态(0:禁用,1:启用)
}

message UpdateUserReply {}

message DeleteUserRequest {
	int64 id = 1;
}

message DeleteUserReply {}

message ListUserRequest {
	int64 page = 1;
	int64 page_size = 2;
	string name = 3;
	int64 user_type = 4;
	int64 status = 5;
}

message ListUserReply {
	repeated UserInfo list = 1;
	int64 count = 2;
}

message UserInfo {
	int64 id = 1; // 用户ID
	string account = 2; // 用户账号
	string name = 3; // 用户名称
	string avatar = 4; // 用户头像地址
	bool is_enable = 5; // 可用状态(0:禁用,1:启用)
	string created_at = 6; // 添加时间
	string updated_at = 7; // 修改时间
}

message FindUserRequest {
	int64 id = 1;
}

message FindUserReply {
	UserInfo user = 1;
}